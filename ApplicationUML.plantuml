@startuml

class QMainWindow {
PyQt5.QtWidgets
}

class Ui_MainWindow {
  +setupUi()
  +retranslateUi()
}

class Main {
  +List frame
  
  
  
  +setupUi()
  +Process_Image()
  +Process_Video()
}

class Detect_Robot {
  +List Robot_Pattern_Dict
  +List _Frame_Data


  +detect_robot():Python Dictionary
}

class Image_Processing {
  +List frameNew
  +List _Frame_Data

  +_start_process():Python Dictionary
}


class HSV_COLOR_PICKER {
  +List frame

  +color_picker()
}

class Capture_Image {
  +List frame

  +load_image():List
}

class Capture_Video {
  +List frame

  +start_video_capturing():List
  +set_camera_config()
}

class UDP_Connection {
  +Socket socket_ssl

  #__init__()
}

class UDP_Send {
  +QUEUE Sendqueuel

  +run(): @Override 
  +send(ProtoBuf)
  +convert_data_to_ProtoBuf_format(Dictionary)
}

class multiprocessing {

  +run()
}

class UDP_Receive {
  +QUEUE Sendqueuel

  +run()
  +receive()
  +convert_data_to_ProtoBuf_format()
}

class Client_Socket_ProtoBuf {
  +List ProtoBuf

  +ssl_robot_detection_message()
}

Ui_MainWindow <|-- Main : Application user interface
QMainWindow <|-- Main : PyQt5

multiprocessing <|-- UDP_Send : multiprocessing.Process Python class
UDP_Connection <|.. UDP_Send : Get server information
UDP_Connection <|.. UDP_Receive : Get server information
UDP_Send *-- Client_Socket_ProtoBuf : convert data to ProtoBuf format
UDP_Receive *-- Client_Socket_ProtoBuf : convert data to ProtoBuf format

Main *-- Image_Processing : return frame data
Main *-- Detect_Robot : return robots info
Main *-- HSV_COLOR_PICKER : Pick HSV color range
Main *-- Capture_Image : Return frame
Main *-- Capture_Video : Return frame

Main <-- UDP_Send : Send data to server after each loop cycle

@enduml
